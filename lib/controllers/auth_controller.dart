import 'package:diem_danh_sv/models/profile_model.dart';
import 'package:flutter_secure_storage/flutter_secure_storage.dart';
import 'dart:convert';
import '../services/auth_service.dart';
import '../models/auth_model.dart';
import '../models/user_model.dart';

class AuthController {
  final AuthService _authService = AuthService();
  final FlutterSecureStorage _storage = const FlutterSecureStorage();

  // Ph∆∞∆°ng th·ª©c ƒëƒÉng nh·∫≠p
  Future<bool> login(String email, String password) async {
    try {
      final AuthModel auth = await _authService.login(email, password);

      // L∆∞u token v√†o secure storage
      await _storage.write(key: 'access_token', value: auth.accessToken);
      await _storage.write(key: 'refresh_token', value: auth.refreshToken);

      // L·∫•y th√¥ng tin ng∆∞·ªùi d√πng
      final User user = await _authService.getUserInfo(auth.accessToken);

      // L∆∞u th√¥ng tin ng∆∞·ªùi d√πng d∆∞·ªõi d·∫°ng JSON string
      await _storage.write(key: 'user_info', value: jsonEncode(user.toJson()));

      return true;
    } catch (e) {
      print('L·ªói ƒëƒÉng nh·∫≠p: $e');
      return false;
    }
  }

  // Ph∆∞∆°ng th·ª©c ki·ªÉm tra ƒë√£ ƒëƒÉng nh·∫≠p ch∆∞a
  Future<bool> isLoggedIn() async {
    final accessToken = await _storage.read(key: 'access_token');
    print('DEBUG accessToken: '
        '[32m$accessToken[0m'); // In ra accessToken khi ki·ªÉm tra
    if (accessToken == null) return false;
    if (accessToken.trim().isEmpty) return false;
    // C√≥ th·ªÉ ki·ªÉm tra th√™m: accessToken c√≥ ƒë√∫ng ƒë·ªãnh d·∫°ng JWT kh√¥ng?
    return true;
  }

  // Ph∆∞∆°ng th·ª©c ƒëƒÉng xu·∫•t
  Future<void> logout() async {
    await _storage.delete(key: 'access_token');
    await _storage.delete(key: 'refresh_token');
    await _storage.delete(key: 'user_info');
    await _storage.delete(key: 'user_info_current');
    // X√≥a t·∫•t c·∫£ d·ªØ li·ªáu trong secure storage
  }

  // Ph∆∞∆°ng th·ª©c x√≥a access token
  Future<void> clearAccessToken() async {
    await _storage.delete(key: 'access_token');
    print('Access token ƒë√£ ƒë∆∞·ª£c x√≥a');
  }

  // Ph∆∞∆°ng th·ª©c l·∫•y token
  Future<String?> getAccessToken() async {
    return await _storage.read(key: 'access_token');
  }

  // Ph∆∞∆°ng th·ª©c l·∫•y th√¥ng tin ng∆∞·ªùi d√πng ƒë√£ l∆∞u
  Future<User?> getUserInfo() async {
    final userInfoString = await _storage.read(key: 'user_info');
    if (userInfoString != null && userInfoString.isNotEmpty) {
      try {
        // Chuy·ªÉn ƒë·ªïi chu·ªói JSON th√†nh Map
        final Map<String, dynamic> userMap = json.decode(userInfoString);
        // T·∫°o ƒë·ªëi t∆∞·ª£ng User t·ª´ Map
        return User.fromJson(userMap);
      } catch (e) {
        print('L·ªói parse th√¥ng tin ng∆∞·ªùi d√πng: $e');
        return null;
      }
    }
    return null;
  }

  Future<ProfileModel?> getUserInfoCurrent() async {
    final userInfoString = await _storage.read(key: 'user_info_current');
    if (userInfoString != null && userInfoString.isNotEmpty) {
      try {
        // Chuy·ªÉn ƒë·ªïi chu·ªói JSON th√†nh Map
        final Map<String, dynamic> userMap = json.decode(userInfoString);
        // T·∫°o ƒë·ªëi t∆∞·ª£ng ProfileModel t·ª´ Map
        return ProfileModel.fromJson(userMap);
      } catch (e) {
        print('L·ªói parse th√¥ng tin ng∆∞·ªùi d√πng: $e');
        return null;
      }
    }
    return null;
  }

  // Ph∆∞∆°ng th·ª©c l√†m m·ªõi access token khi kh·ªüi ƒë·ªông app
  Future<bool> refreshAccessToken() async {
    try {
      final refreshToken = await _storage.read(key: 'refresh_token');

      // N·∫øu kh√¥ng c√≥ refresh token th√¨ kh√¥ng th·ªÉ l√†m m·ªõi
      if (refreshToken == null || refreshToken.isEmpty) {
        print('Kh√¥ng c√≥ refresh token ƒë·ªÉ l√†m m·ªõi phi√™n ƒëƒÉng nh·∫≠p');
        await clearAccessToken(); // ƒê·∫£m b·∫£o x√≥a access token n·∫øu kh√¥ng c√≥ refresh token
        return false;
      }

      // G·ªçi API ƒë·ªÉ l√†m m·ªõi token
      final AuthModel newAuth = await _authService.refreshToken(refreshToken);

      // Ki·ªÉm tra accessToken m·ªõi c√≥ t·ªìn t·∫°i kh√¥ng
      if (newAuth.accessToken.isEmpty) {
        print('Access token m·ªõi kh√¥ng h·ª£p l·ªá');
        await clearAccessToken();
        return false;
      }

      // L∆∞u access token m·ªõi v√†o secure storage
      await _storage.write(key: 'access_token', value: newAuth.accessToken);

      try {
        // C·∫≠p nh·∫≠t th√¥ng tin ng∆∞·ªùi d√πng n·∫øu c·∫ßn
        final User user = await _authService.getUserInfo(newAuth.accessToken);
        await _storage.write(
            key: 'user_info', value: jsonEncode(user.toJson()));
      } catch (userError) {
        print('Kh√¥ng th·ªÉ l·∫•y th√¥ng tin ng∆∞·ªùi d√πng: $userError');
        // Ti·∫øp t·ª•c v√¨ ƒë√£ c√≥ access token m·ªõi
      }

      print('Access token ƒë√£ ƒë∆∞·ª£c l√†m m·ªõi th√†nh c√¥ng');
      return true;
    } catch (e) {
      print('L·ªói khi l√†m m·ªõi access token: $e');
      // X√≥a token c≈© n·∫øu refresh th·∫•t b·∫°i
      await clearAccessToken();
      return false;
    }
  }
}
